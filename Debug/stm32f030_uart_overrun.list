
stm32f030_uart_overrun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002610  08002610  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002610  08002610  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002610  08002610  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  08002680  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08002680  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005dcb  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015a5  00000000  00000000  00025e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000670  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000598  00000000  00000000  00027a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b95e  00000000  00000000  00028008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069fa  00000000  00000000  00033966  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00040a3b  00000000  00000000  0003a360  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007ad9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d8  00000000  00000000  0007ae18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025c0 	.word	0x080025c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080025c0 	.word	0x080025c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_GPIO_Init+0x2c>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x2c>)
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	0289      	lsls	r1, r1, #10
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x2c>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	029b      	lsls	r3, r3, #10
 800023c:	4013      	ands	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fa14 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f826 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffe0 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000260:	f000 f8ec 	bl	800043c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000264:	f000 f91a 	bl	800049c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000268:	2064      	movs	r0, #100	; 0x64
 800026a:	f000 fa6d 	bl	8000748 <HAL_Delay>

  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 800026e:	490a      	ldr	r1, [pc, #40]	; (8000298 <main+0x48>)
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <main+0x4c>)
 8000272:	225a      	movs	r2, #90	; 0x5a
 8000274:	0018      	movs	r0, r3
 8000276:	f001 fb1b 	bl	80018b0 <HAL_UART_Receive_IT>
 800027a:	1e03      	subs	r3, r0, #0
 800027c:	d001      	beq.n	8000282 <main+0x32>
  {
    Error_Handler();
 800027e:	f000 f87c 	bl	800037a <Error_Handler>
  }

  if(HAL_UART_Transmit_IT(&huart1, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000282:	4907      	ldr	r1, [pc, #28]	; (80002a0 <main+0x50>)
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <main+0x54>)
 8000286:	225a      	movs	r2, #90	; 0x5a
 8000288:	0018      	movs	r0, r3
 800028a:	f001 faa3 	bl	80017d4 <HAL_UART_Transmit_IT>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d001      	beq.n	8000296 <main+0x46>
  {
    Error_Handler();
 8000292:	f000 f872 	bl	800037a <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000296:	e7fe      	b.n	8000296 <main+0x46>
 8000298:	20000084 	.word	0x20000084
 800029c:	20000160 	.word	0x20000160
 80002a0:	20000000 	.word	0x20000000
 80002a4:	200000e0 	.word	0x200000e0

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b095      	sub	sp, #84	; 0x54
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2420      	movs	r4, #32
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2330      	movs	r3, #48	; 0x30
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 f979 	bl	80025b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	2310      	movs	r3, #16
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	2310      	movs	r3, #16
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 f971 	bl	80025b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 f96a 	bl	80025b0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2202      	movs	r2, #2
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2210      	movs	r2, #16
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2202      	movs	r2, #2
 80002f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	22a0      	movs	r2, #160	; 0xa0
 8000300:	0392      	lsls	r2, r2, #14
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	187b      	adds	r3, r7, r1
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fcd1 	bl	8000cb4 <HAL_RCC_OscConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000316:	f000 f830 	bl	800037a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	2110      	movs	r1, #16
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2207      	movs	r2, #7
 8000320:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2202      	movs	r2, #2
 8000326:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2101      	movs	r1, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f000 ffd7 	bl	80012ec <HAL_RCC_ClockConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000342:	f000 f81a 	bl	800037a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000346:	003b      	movs	r3, r7
 8000348:	2201      	movs	r2, #1
 800034a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800034c:	003b      	movs	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f91b 	bl	8001590 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800035e:	f000 f80c 	bl	800037a <Error_Handler>
  }
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b015      	add	sp, #84	; 0x54
 8000368:	bd90      	pop	{r4, r7, pc}

0800036a <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
  {

  }
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}

0800037a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x44>)
 800038c:	699a      	ldr	r2, [r3, #24]
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x44>)
 8000390:	2101      	movs	r1, #1
 8000392:	430a      	orrs	r2, r1
 8000394:	619a      	str	r2, [r3, #24]
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x44>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	2201      	movs	r2, #1
 800039c:	4013      	ands	r3, r2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x44>)
 80003a4:	69da      	ldr	r2, [r3, #28]
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_MspInit+0x44>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0549      	lsls	r1, r1, #21
 80003ac:	430a      	orrs	r2, r1
 80003ae:	61da      	str	r2, [r3, #28]
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_MspInit+0x44>)
 80003b2:	69da      	ldr	r2, [r3, #28]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	055b      	lsls	r3, r3, #21
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <HardFault_Handler+0x4>

080003dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f4:	f000 f98c 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <USART1_IRQHandler+0x14>)
 8000406:	0018      	movs	r0, r3
 8000408:	f001 faf6 	bl	80019f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	200000e0 	.word	0x200000e0

08000418 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <USART2_IRQHandler+0x14>)
 800041e:	0018      	movs	r0, r3
 8000420:	f001 faea 	bl	80019f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	20000160 	.word	0x20000160

08000430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <MX_USART1_UART_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000448:	22e1      	movs	r2, #225	; 0xe1
 800044a:	0252      	lsls	r2, r2, #9
 800044c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_USART1_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_USART1_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_USART1_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000480:	0018      	movs	r0, r3
 8000482:	f001 f953 	bl	800172c <HAL_UART_Init>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800048a:	f7ff ff76 	bl	800037a <Error_Handler>
  }

}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000e0 	.word	0x200000e0
 8000498:	40013800 	.word	0x40013800

0800049c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a2:	4a15      	ldr	r2, [pc, #84]	; (80004f8 <MX_USART2_UART_Init+0x5c>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a8:	22e1      	movs	r2, #225	; 0xe1
 80004aa:	0252      	lsls	r2, r2, #9
 80004ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 f923 	bl	800172c <HAL_UART_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ea:	f7ff ff46 	bl	800037a <Error_Handler>
  }

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000160 	.word	0x20000160
 80004f8:	40004400 	.word	0x40004400

080004fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	231c      	movs	r3, #28
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	0018      	movs	r0, r3
 800050a:	2314      	movs	r3, #20
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f002 f84e 	bl	80025b0 <memset>
  if(uartHandle->Instance==USART1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a41      	ldr	r2, [pc, #260]	; (8000620 <HAL_UART_MspInit+0x124>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d13c      	bne.n	8000598 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800051e:	4b41      	ldr	r3, [pc, #260]	; (8000624 <HAL_UART_MspInit+0x128>)
 8000520:	699a      	ldr	r2, [r3, #24]
 8000522:	4b40      	ldr	r3, [pc, #256]	; (8000624 <HAL_UART_MspInit+0x128>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	01c9      	lsls	r1, r1, #7
 8000528:	430a      	orrs	r2, r1
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <HAL_UART_MspInit+0x128>)
 800052e:	699a      	ldr	r2, [r3, #24]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	01db      	lsls	r3, r3, #7
 8000534:	4013      	ands	r3, r2
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <HAL_UART_MspInit+0x128>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <HAL_UART_MspInit+0x128>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0289      	lsls	r1, r1, #10
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	4b36      	ldr	r3, [pc, #216]	; (8000624 <HAL_UART_MspInit+0x128>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	029b      	lsls	r3, r3, #10
 8000550:	4013      	ands	r3, r2
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000556:	211c      	movs	r1, #28
 8000558:	187b      	adds	r3, r7, r1
 800055a:	22c0      	movs	r2, #192	; 0xc0
 800055c:	00d2      	lsls	r2, r2, #3
 800055e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2202      	movs	r2, #2
 8000564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2203      	movs	r2, #3
 8000570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	187a      	adds	r2, r7, r1
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fa27 	bl	80009d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	201b      	movs	r0, #27
 800058c:	f000 f9aa 	bl	80008e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000590:	201b      	movs	r0, #27
 8000592:	f000 f9bc 	bl	800090e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000596:	e03f      	b.n	8000618 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <HAL_UART_MspInit+0x12c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d13a      	bne.n	8000618 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <HAL_UART_MspInit+0x128>)
 80005a4:	69da      	ldr	r2, [r3, #28]
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_UART_MspInit+0x128>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0289      	lsls	r1, r1, #10
 80005ac:	430a      	orrs	r2, r1
 80005ae:	61da      	str	r2, [r3, #28]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <HAL_UART_MspInit+0x128>)
 80005b2:	69da      	ldr	r2, [r3, #28]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	029b      	lsls	r3, r3, #10
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_UART_MspInit+0x128>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <HAL_UART_MspInit+0x128>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_UART_MspInit+0x128>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005da:	211c      	movs	r1, #28
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2202      	movs	r2, #2
 80005e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2203      	movs	r2, #3
 80005f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2201      	movs	r2, #1
 80005f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	187a      	adds	r2, r7, r1
 80005fc:	2390      	movs	r3, #144	; 0x90
 80005fe:	05db      	lsls	r3, r3, #23
 8000600:	0011      	movs	r1, r2
 8000602:	0018      	movs	r0, r3
 8000604:	f000 f9e6 	bl	80009d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	201c      	movs	r0, #28
 800060e:	f000 f969 	bl	80008e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000612:	201c      	movs	r0, #28
 8000614:	f000 f97b 	bl	800090e <HAL_NVIC_EnableIRQ>
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b00c      	add	sp, #48	; 0x30
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40013800 	.word	0x40013800
 8000624:	40021000 	.word	0x40021000
 8000628:	40004400 	.word	0x40004400

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0b      	ldr	r4, [pc, #44]	; (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000656:	f7ff feeb 	bl	8000430 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800065a:	f001 ff85 	bl	8002568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fdf7 	bl	8000250 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000670:	08002618 	.word	0x08002618
  ldr r2, =_sbss
 8000674:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000678:	200001e4 	.word	0x200001e4

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>
	...

08000680 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_Init+0x24>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_Init+0x24>)
 800068a:	2110      	movs	r1, #16
 800068c:	430a      	orrs	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f809 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000696:	f7ff fe75 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_InitTick+0x5c>)
 80006b2:	681c      	ldr	r4, [r3, #0]
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_InitTick+0x60>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	0019      	movs	r1, r3
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	0098      	lsls	r0, r3, #2
 80006be:	f7ff fd23 	bl	8000108 <__udivsi3>
 80006c2:	0003      	movs	r3, r0
 80006c4:	0019      	movs	r1, r3
 80006c6:	0020      	movs	r0, r4
 80006c8:	f7ff fd1e 	bl	8000108 <__udivsi3>
 80006cc:	0003      	movs	r3, r0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f92d 	bl	800092e <HAL_SYSTICK_Config>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	e00f      	b.n	80006fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d80b      	bhi.n	80006fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	2301      	movs	r3, #1
 80006e6:	425b      	negs	r3, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f8fa 	bl	80008e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_InitTick+0x64>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	b003      	add	sp, #12
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	2000005c 	.word	0x2000005c
 8000708:	20000064 	.word	0x20000064
 800070c:	20000060 	.word	0x20000060

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x1c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	001a      	movs	r2, r3
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x20>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	18d2      	adds	r2, r2, r3
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_IncTick+0x20>)
 8000722:	601a      	str	r2, [r3, #0]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000064 	.word	0x20000064
 8000730:	200001e0 	.word	0x200001e0

08000734 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <HAL_GetTick+0x10>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	200001e0 	.word	0x200001e0

08000748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff fff0 	bl	8000734 <HAL_GetTick>
 8000754:	0003      	movs	r3, r0
 8000756:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_Delay+0x40>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	001a      	movs	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	189b      	adds	r3, r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	f7ff ffe0 	bl	8000734 <HAL_GetTick>
 8000774:	0002      	movs	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000064 	.word	0x20000064

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	0002      	movs	r2, r0
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b7f      	cmp	r3, #127	; 0x7f
 800079e:	d809      	bhi.n	80007b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	001a      	movs	r2, r3
 80007a6:	231f      	movs	r3, #31
 80007a8:	401a      	ands	r2, r3
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <__NVIC_EnableIRQ+0x30>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	4091      	lsls	r1, r2
 80007b0:	000a      	movs	r2, r1
 80007b2:	601a      	str	r2, [r3, #0]
  }
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b7f      	cmp	r3, #127	; 0x7f
 80007d4:	d828      	bhi.n	8000828 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <__NVIC_SetPriority+0xd4>)
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	33c0      	adds	r3, #192	; 0xc0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	589b      	ldr	r3, [r3, r2]
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	21ff      	movs	r1, #255	; 0xff
 80007f4:	4091      	lsls	r1, r2
 80007f6:	000a      	movs	r2, r1
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	401a      	ands	r2, r3
 80007fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	401a      	ands	r2, r3
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0018      	movs	r0, r3
 800080c:	2303      	movs	r3, #3
 800080e:	4003      	ands	r3, r0
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	481f      	ldr	r0, [pc, #124]	; (8000894 <__NVIC_SetPriority+0xd4>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b25b      	sxtb	r3, r3
 800081c:	089b      	lsrs	r3, r3, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	33c0      	adds	r3, #192	; 0xc0
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000826:	e031      	b.n	800088c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <__NVIC_SetPriority+0xd8>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0019      	movs	r1, r3
 8000830:	230f      	movs	r3, #15
 8000832:	400b      	ands	r3, r1
 8000834:	3b08      	subs	r3, #8
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	3306      	adds	r3, #6
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	18d3      	adds	r3, r2, r3
 800083e:	3304      	adds	r3, #4
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1dfa      	adds	r2, r7, #7
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	0011      	movs	r1, r2
 8000848:	2203      	movs	r2, #3
 800084a:	400a      	ands	r2, r1
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	21ff      	movs	r1, #255	; 0xff
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	401a      	ands	r2, r3
 8000858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	401a      	ands	r2, r3
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0018      	movs	r0, r3
 8000868:	2303      	movs	r3, #3
 800086a:	4003      	ands	r3, r0
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <__NVIC_SetPriority+0xd8>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	001c      	movs	r4, r3
 8000878:	230f      	movs	r3, #15
 800087a:	4023      	ands	r3, r4
 800087c:	3b08      	subs	r3, #8
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	430a      	orrs	r2, r1
 8000882:	3306      	adds	r3, #6
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	18c3      	adds	r3, r0, r3
 8000888:	3304      	adds	r3, #4
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b003      	add	sp, #12
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <SysTick_Config+0x40>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d901      	bls.n	80008b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ae:	2301      	movs	r3, #1
 80008b0:	e010      	b.n	80008d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <SysTick_Config+0x44>)
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	3a01      	subs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ba:	2301      	movs	r3, #1
 80008bc:	425b      	negs	r3, r3
 80008be:	2103      	movs	r1, #3
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff7d 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SysTick_Config+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x44>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	00ffffff 	.word	0x00ffffff
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	210f      	movs	r1, #15
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	1c02      	adds	r2, r0, #0
 80008f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff ff5d 	bl	80007c0 <__NVIC_SetPriority>
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	0002      	movs	r2, r0
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff33 	bl	800078c <__NVIC_EnableIRQ>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ffaf 	bl	800089c <SysTick_Config>
 800093e:	0003      	movs	r3, r0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000950:	230f      	movs	r3, #15
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2221      	movs	r2, #33	; 0x21
 800095c:	5c9b      	ldrb	r3, [r3, r2]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b02      	cmp	r3, #2
 8000962:	d007      	beq.n	8000974 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2204      	movs	r2, #4
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800096a:	230f      	movs	r3, #15
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e028      	b.n	80009c6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	210e      	movs	r1, #14
 8000980:	438a      	bics	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2101      	movs	r1, #1
 8000990:	438a      	bics	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099c:	2101      	movs	r1, #1
 800099e:	4091      	lsls	r1, r2
 80009a0:	000a      	movs	r2, r1
 80009a2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2221      	movs	r2, #33	; 0x21
 80009a8:	2101      	movs	r1, #1
 80009aa:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2220      	movs	r2, #32
 80009b0:	2100      	movs	r1, #0
 80009b2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	0010      	movs	r0, r2
 80009c4:	4798      	blx	r3
    } 
  }
  return status;
 80009c6:	230f      	movs	r3, #15
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b004      	add	sp, #16
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e14f      	b.n	8000c84 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d100      	bne.n	80009fc <HAL_GPIO_Init+0x28>
 80009fa:	e140      	b.n	8000c7e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x38>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b12      	cmp	r3, #18
 8000a0a:	d123      	bne.n	8000a54 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	58d3      	ldr	r3, [r2, r3]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	4013      	ands	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	409a      	lsls	r2, r3
 8000a26:	0013      	movs	r3, r2
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	691a      	ldr	r2, [r3, #16]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2107      	movs	r1, #7
 8000a38:	400b      	ands	r3, r1
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	6939      	ldr	r1, [r7, #16]
 8000a52:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	409a      	lsls	r2, r3
 8000a62:	0013      	movs	r3, r2
 8000a64:	43da      	mvns	r2, r3
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2203      	movs	r2, #3
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d00b      	beq.n	8000aa8 <HAL_GPIO_Init+0xd4>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9c:	2b11      	cmp	r3, #17
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b12      	cmp	r3, #18
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	43da      	mvns	r2, r3
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	0013      	movs	r3, r2
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	2201      	movs	r2, #1
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	055b      	lsls	r3, r3, #21
 8000b42:	4013      	ands	r3, r2
 8000b44:	d100      	bne.n	8000b48 <HAL_GPIO_Init+0x174>
 8000b46:	e09a      	b.n	8000c7e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000b4a:	699a      	ldr	r2, [r3, #24]
 8000b4c:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	430a      	orrs	r2, r1
 8000b52:	619a      	str	r2, [r3, #24]
 8000b54:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b60:	4a4f      	ldr	r2, [pc, #316]	; (8000ca0 <HAL_GPIO_Init+0x2cc>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	589b      	ldr	r3, [r3, r2]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2203      	movs	r2, #3
 8000b72:	4013      	ands	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	2390      	movs	r3, #144	; 0x90
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x1e2>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a44      	ldr	r2, [pc, #272]	; (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x1de>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a43      	ldr	r2, [pc, #268]	; (8000ca8 <HAL_GPIO_Init+0x2d4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x1da>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <HAL_GPIO_Init+0x2d8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x1d6>
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000baa:	2305      	movs	r3, #5
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	2103      	movs	r1, #3
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <HAL_GPIO_Init+0x2cc>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	029b      	lsls	r3, r3, #10
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	035b      	lsls	r3, r3, #13
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	1e13      	subs	r3, r2, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_GPIO_Init+0x2be>
 8000c90:	e6a8      	b.n	80009e4 <HAL_GPIO_Init+0x10>
  } 
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b006      	add	sp, #24
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e303      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x1e>
 8000cd0:	e08d      	b.n	8000dee <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd2:	4bc4      	ldr	r3, [pc, #784]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d00e      	beq.n	8000cfc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cde:	4bc1      	ldr	r3, [pc, #772]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d116      	bne.n	8000d18 <HAL_RCC_OscConfig+0x64>
 8000cea:	4bbe      	ldr	r3, [pc, #760]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	025b      	lsls	r3, r3, #9
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d10d      	bne.n	8000d18 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfc:	4bb9      	ldr	r3, [pc, #740]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	4013      	ands	r3, r2
 8000d06:	d100      	bne.n	8000d0a <HAL_RCC_OscConfig+0x56>
 8000d08:	e070      	b.n	8000dec <HAL_RCC_OscConfig+0x138>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d000      	beq.n	8000d14 <HAL_RCC_OscConfig+0x60>
 8000d12:	e06b      	b.n	8000dec <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e2da      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d107      	bne.n	8000d30 <HAL_RCC_OscConfig+0x7c>
 8000d20:	4bb0      	ldr	r3, [pc, #704]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4baf      	ldr	r3, [pc, #700]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0249      	lsls	r1, r1, #9
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e02f      	b.n	8000d90 <HAL_RCC_OscConfig+0xdc>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10c      	bne.n	8000d52 <HAL_RCC_OscConfig+0x9e>
 8000d38:	4baa      	ldr	r3, [pc, #680]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4ba9      	ldr	r3, [pc, #676]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	49aa      	ldr	r1, [pc, #680]	; (8000fe8 <HAL_RCC_OscConfig+0x334>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	4ba7      	ldr	r3, [pc, #668]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4ba6      	ldr	r3, [pc, #664]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	49a8      	ldr	r1, [pc, #672]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e01e      	b.n	8000d90 <HAL_RCC_OscConfig+0xdc>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d10e      	bne.n	8000d78 <HAL_RCC_OscConfig+0xc4>
 8000d5a:	4ba2      	ldr	r3, [pc, #648]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4ba1      	ldr	r3, [pc, #644]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	02c9      	lsls	r1, r1, #11
 8000d64:	430a      	orrs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	4b9e      	ldr	r3, [pc, #632]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b9d      	ldr	r3, [pc, #628]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e00b      	b.n	8000d90 <HAL_RCC_OscConfig+0xdc>
 8000d78:	4b9a      	ldr	r3, [pc, #616]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b99      	ldr	r3, [pc, #612]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d7e:	499a      	ldr	r1, [pc, #616]	; (8000fe8 <HAL_RCC_OscConfig+0x334>)
 8000d80:	400a      	ands	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	4b97      	ldr	r3, [pc, #604]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b96      	ldr	r3, [pc, #600]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000d8a:	4998      	ldr	r1, [pc, #608]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d014      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fccc 	bl	8000734 <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da2:	f7ff fcc7 	bl	8000734 <HAL_GetTick>
 8000da6:	0002      	movs	r2, r0
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b64      	cmp	r3, #100	; 0x64
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e28c      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db4:	4b8b      	ldr	r3, [pc, #556]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	029b      	lsls	r3, r3, #10
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0xee>
 8000dc0:	e015      	b.n	8000dee <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fcb7 	bl	8000734 <HAL_GetTick>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fcb2 	bl	8000734 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e277      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b81      	ldr	r3, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	4013      	ands	r3, r2
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x118>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	d100      	bne.n	8000dfa <HAL_RCC_OscConfig+0x146>
 8000df8:	e069      	b.n	8000ece <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dfa:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	220c      	movs	r2, #12
 8000e00:	4013      	ands	r3, r2
 8000e02:	d00b      	beq.n	8000e1c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e04:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	220c      	movs	r2, #12
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d11c      	bne.n	8000e4a <HAL_RCC_OscConfig+0x196>
 8000e10:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	025b      	lsls	r3, r3, #9
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d116      	bne.n	8000e4a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1c:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2202      	movs	r2, #2
 8000e22:	4013      	ands	r3, r2
 8000e24:	d005      	beq.n	8000e32 <HAL_RCC_OscConfig+0x17e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d001      	beq.n	8000e32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e24d      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e32:	4b6c      	ldr	r3, [pc, #432]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	22f8      	movs	r2, #248	; 0xf8
 8000e38:	4393      	bics	r3, r2
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	00da      	lsls	r2, r3, #3
 8000e42:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e48:	e041      	b.n	8000ece <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d024      	beq.n	8000e9c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e52:	4b64      	ldr	r3, [pc, #400]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc69 	bl	8000734 <HAL_GetTick>
 8000e62:	0003      	movs	r3, r0
 8000e64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc64 	bl	8000734 <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e229      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7a:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	d0f1      	beq.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	22f8      	movs	r2, #248	; 0xf8
 8000e8a:	4393      	bics	r3, r2
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	00da      	lsls	r2, r3, #3
 8000e94:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e018      	b.n	8000ece <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9c:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fc44 	bl	8000734 <HAL_GetTick>
 8000eac:	0003      	movs	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fc3f 	bl	8000734 <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e204      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec4:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2202      	movs	r2, #2
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d1f1      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d036      	beq.n	8000f46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d019      	beq.n	8000f14 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee0:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee4:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eec:	f7ff fc22 	bl	8000734 <HAL_GetTick>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fc1d 	bl	8000734 <HAL_GetTick>
 8000efa:	0002      	movs	r2, r0
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e1e2      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d0f1      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x242>
 8000f12:	e018      	b.n	8000f46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fc08 	bl	8000734 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fc03 	bl	8000734 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e1c8      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	2202      	movs	r2, #2
 8000f42:	4013      	ands	r3, r2
 8000f44:	d1f1      	bne.n	8000f2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d100      	bne.n	8000f52 <HAL_RCC_OscConfig+0x29e>
 8000f50:	e0b6      	b.n	80010c0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	231f      	movs	r3, #31
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	69da      	ldr	r2, [r3, #28]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	055b      	lsls	r3, r3, #21
 8000f62:	4013      	ands	r3, r2
 8000f64:	d111      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	0549      	lsls	r1, r1, #21
 8000f70:	430a      	orrs	r2, r1
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	055b      	lsls	r3, r3, #21
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f82:	231f      	movs	r3, #31
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_RCC_OscConfig+0x33c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4013      	ands	r3, r2
 8000f94:	d11a      	bne.n	8000fcc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_RCC_OscConfig+0x33c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_RCC_OscConfig+0x33c>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0049      	lsls	r1, r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fbc6 	bl	8000734 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fae:	f7ff fbc1 	bl	8000734 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e186      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_OscConfig+0x33c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x340>
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <HAL_RCC_OscConfig+0x330>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
 8000fe0:	e036      	b.n	8001050 <HAL_RCC_OscConfig+0x39c>
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	fffeffff 	.word	0xfffeffff
 8000fec:	fffbffff 	.word	0xfffbffff
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x362>
 8000ffc:	4bb6      	ldr	r3, [pc, #728]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4bb5      	ldr	r3, [pc, #724]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	4bb3      	ldr	r3, [pc, #716]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	4bb2      	ldr	r3, [pc, #712]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	e01c      	b.n	8001050 <HAL_RCC_OscConfig+0x39c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x384>
 800101e:	4bae      	ldr	r3, [pc, #696]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4bad      	ldr	r3, [pc, #692]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001024:	2104      	movs	r1, #4
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	4bab      	ldr	r3, [pc, #684]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	4baa      	ldr	r3, [pc, #680]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0x39c>
 8001038:	4ba7      	ldr	r3, [pc, #668]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4ba6      	ldr	r3, [pc, #664]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	4ba4      	ldr	r3, [pc, #656]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4ba3      	ldr	r3, [pc, #652]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800104a:	2104      	movs	r1, #4
 800104c:	438a      	bics	r2, r1
 800104e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d014      	beq.n	8001082 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fb6c 	bl	8000734 <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	e009      	b.n	8001076 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fb67 	bl	8000734 <HAL_GetTick>
 8001066:	0002      	movs	r2, r0
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	4a9b      	ldr	r2, [pc, #620]	; (80012dc <HAL_RCC_OscConfig+0x628>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e12b      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001076:	4b98      	ldr	r3, [pc, #608]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x3ae>
 8001080:	e013      	b.n	80010aa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fb57 	bl	8000734 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108a:	e009      	b.n	80010a0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff fb52 	bl	8000734 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a91      	ldr	r2, [pc, #580]	; (80012dc <HAL_RCC_OscConfig+0x628>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e116      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010aa:	231f      	movs	r3, #31
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b4:	4b88      	ldr	r3, [pc, #544]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	4b87      	ldr	r3, [pc, #540]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010ba:	4989      	ldr	r1, [pc, #548]	; (80012e0 <HAL_RCC_OscConfig+0x62c>)
 80010bc:	400a      	ands	r2, r1
 80010be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2210      	movs	r2, #16
 80010c6:	4013      	ands	r3, r2
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d12a      	bne.n	8001128 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d2:	4b81      	ldr	r3, [pc, #516]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010d8:	2104      	movs	r1, #4
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010de:	4b7e      	ldr	r3, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e2:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb23 	bl	8000734 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f4:	f7ff fb1e 	bl	8000734 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e0e3      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001106:	4b74      	ldr	r3, [pc, #464]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	2202      	movs	r2, #2
 800110c:	4013      	ands	r3, r2
 800110e:	d0f1      	beq.n	80010f4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001110:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	22f8      	movs	r2, #248	; 0xf8
 8001116:	4393      	bics	r3, r2
 8001118:	0019      	movs	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	00da      	lsls	r2, r3, #3
 8001120:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
 8001126:	e034      	b.n	8001192 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	3305      	adds	r3, #5
 800112e:	d111      	bne.n	8001154 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001136:	2104      	movs	r1, #4
 8001138:	438a      	bics	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800113c:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001140:	22f8      	movs	r2, #248	; 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b62      	ldr	r3, [pc, #392]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
 8001152:	e01e      	b.n	8001192 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001154:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800115a:	2104      	movs	r1, #4
 800115c:	430a      	orrs	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001160:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001166:	2101      	movs	r1, #1
 8001168:	438a      	bics	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fae2 	bl	8000734 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001176:	f7ff fadd 	bl	8000734 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0a2      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d1f1      	bne.n	8001176 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <HAL_RCC_OscConfig+0x4e8>
 800119a:	e097      	b.n	80012cc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	220c      	movs	r2, #12
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x4f6>
 80011a8:	e06b      	b.n	8001282 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d14c      	bne.n	800124c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80011b8:	494a      	ldr	r1, [pc, #296]	; (80012e4 <HAL_RCC_OscConfig+0x630>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fab9 	bl	8000734 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff fab4 	bl	8000734 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e079      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	049b      	lsls	r3, r3, #18
 80011e2:	4013      	ands	r3, r2
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	220f      	movs	r2, #15
 80011ec:	4393      	bics	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <HAL_RCC_OscConfig+0x634>)
 8001200:	4013      	ands	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	431a      	orrs	r2, r3
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	0449      	lsls	r1, r1, #17
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fa87 	bl	8000734 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fa82 	bl	8000734 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e047      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	049b      	lsls	r3, r3, #18
 8001246:	4013      	ands	r3, r2
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x578>
 800124a:	e03f      	b.n	80012cc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001252:	4924      	ldr	r1, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x630>)
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fa6c 	bl	8000734 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff fa67 	bl	8000734 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e02c      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	049b      	lsls	r3, r3, #18
 800127c:	4013      	ands	r3, r2
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x5ae>
 8001280:	e024      	b.n	80012cc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e01f      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_OscConfig+0x624>)
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	401a      	ands	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	220f      	movs	r2, #15
 80012ae:	401a      	ands	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d107      	bne.n	80012c8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	23f0      	movs	r3, #240	; 0xf0
 80012bc:	039b      	lsls	r3, r3, #14
 80012be:	401a      	ands	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b008      	add	sp, #32
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40021000 	.word	0x40021000
 80012dc:	00001388 	.word	0x00001388
 80012e0:	efffffff 	.word	0xefffffff
 80012e4:	feffffff 	.word	0xfeffffff
 80012e8:	ffc2ffff 	.word	0xffc2ffff

080012ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b3      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d911      	bls.n	8001332 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4393      	bics	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	4013      	ands	r3, r2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d001      	beq.n	8001332 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e09a      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d015      	beq.n	8001368 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2204      	movs	r2, #4
 8001342:	4013      	ands	r3, r2
 8001344:	d006      	beq.n	8001354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 800134c:	21e0      	movs	r1, #224	; 0xe0
 800134e:	00c9      	lsls	r1, r1, #3
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	22f0      	movs	r2, #240	; 0xf0
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2201      	movs	r2, #1
 800136e:	4013      	ands	r3, r2
 8001370:	d040      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	029b      	lsls	r3, r3, #10
 8001382:	4013      	ands	r3, r2
 8001384:	d114      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e06e      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	049b      	lsls	r3, r3, #18
 800139a:	4013      	ands	r3, r2
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e062      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e05b      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4393      	bics	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff f9b6 	bl	8000734 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ce:	f7ff f9b1 	bl	8000734 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_RCC_ClockConfig+0x18c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e042      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	220c      	movs	r2, #12
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1ec      	bne.n	80013ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d211      	bcs.n	8001426 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4393      	bics	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d001      	beq.n	8001426 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e020      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2204      	movs	r2, #4
 800142c:	4013      	ands	r3, r2
 800142e:	d009      	beq.n	8001444 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_RCC_ClockConfig+0x190>)
 8001436:	4013      	ands	r3, r2
 8001438:	0019      	movs	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001444:	f000 f820 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001448:	0001      	movs	r1, r0
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	220f      	movs	r2, #15
 8001452:	4013      	ands	r3, r2
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_RCC_ClockConfig+0x194>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	000a      	movs	r2, r1
 800145a:	40da      	lsrs	r2, r3
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x198>)
 800145e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff f921 	bl	80006a8 <HAL_InitTick>
  
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40022000 	.word	0x40022000
 8001474:	40021000 	.word	0x40021000
 8001478:	00001388 	.word	0x00001388
 800147c:	fffff8ff 	.word	0xfffff8ff
 8001480:	080025f8 	.word	0x080025f8
 8001484:	2000005c 	.word	0x2000005c

08001488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b08f      	sub	sp, #60	; 0x3c
 800148c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800148e:	2314      	movs	r3, #20
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001494:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001496:	c313      	stmia	r3!, {r0, r1, r4}
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014a2:	c313      	stmia	r3!, {r0, r1, r4}
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	220c      	movs	r2, #12
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d002      	beq.n	80014d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d003      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x50>
 80014d0:	e02d      	b.n	800152e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_GetSysClockFreq+0xc4>)
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014d6:	e02d      	b.n	8001534 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	220f      	movs	r2, #15
 80014de:	4013      	ands	r3, r2
 80014e0:	2214      	movs	r2, #20
 80014e2:	18ba      	adds	r2, r7, r2
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	220f      	movs	r2, #15
 80014ee:	4013      	ands	r3, r2
 80014f0:	1d3a      	adds	r2, r7, #4
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	4013      	ands	r3, r2
 80014fe:	d009      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001504:	f7fe fe00 	bl	8000108 <__udivsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	001a      	movs	r2, r3
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	4353      	muls	r3, r2
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
 8001512:	e009      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001516:	000a      	movs	r2, r1
 8001518:	0152      	lsls	r2, r2, #5
 800151a:	1a52      	subs	r2, r2, r1
 800151c:	0193      	lsls	r3, r2, #6
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	185b      	adds	r3, r3, r1
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800152c:	e002      	b.n	8001534 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001532:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b00f      	add	sp, #60	; 0x3c
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	080025d8 	.word	0x080025d8
 8001544:	080025e8 	.word	0x080025e8
 8001548:	40021000 	.word	0x40021000
 800154c:	007a1200 	.word	0x007a1200

08001550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_RCC_GetHCLKFreq+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	2000005c 	.word	0x2000005c

08001564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001568:	f7ff fff2 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 800156c:	0001      	movs	r1, r0
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	2207      	movs	r2, #7
 8001576:	4013      	ands	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_RCC_GetPCLK1Freq+0x28>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	40d9      	lsrs	r1, r3
 800157e:	000b      	movs	r3, r1
}    
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000
 800158c:	08002608 	.word	0x08002608

08001590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80015ac:	e08f      	b.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80015ae:	2317      	movs	r3, #23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	4013      	ands	r3, r2
 80015c0:	d111      	bne.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0549      	lsls	r1, r1, #21
 80015cc:	430a      	orrs	r2, r1
 80015ce:	61da      	str	r2, [r3, #28]
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	055b      	lsls	r3, r3, #21
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2317      	movs	r3, #23
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	d11a      	bne.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0049      	lsls	r1, r1, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001600:	f7ff f898 	bl	8000734 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	e008      	b.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160a:	f7ff f893 	bl	8000734 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b64      	cmp	r3, #100	; 0x64
 8001616:	d901      	bls.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e077      	b.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4013      	ands	r3, r2
 8001626:	d0f0      	beq.n	800160a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	23c0      	movs	r3, #192	; 0xc0
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d034      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4013      	ands	r3, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	429a      	cmp	r2, r3
 8001648:	d02c      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0249      	lsls	r1, r1, #9
 800165e:	430a      	orrs	r2, r1
 8001660:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001668:	492d      	ldr	r1, [pc, #180]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800166a:	400a      	ands	r2, r1
 800166c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff f85a 	bl	8000734 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e009      	b.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff f855 	bl	8000734 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e038      	b.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b8:	2317      	movs	r3, #23
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d105      	bne.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016c8:	4917      	ldr	r1, [pc, #92]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	4013      	ands	r3, r2
 80016d6:	d009      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	2203      	movs	r2, #3
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2220      	movs	r2, #32
 80016f2:	4013      	ands	r3, r2
 80016f4:	d009      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	2210      	movs	r2, #16
 80016fc:	4393      	bics	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001706:	430a      	orrs	r2, r1
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	40007000 	.word	0x40007000
 800171c:	fffffcff 	.word	0xfffffcff
 8001720:	fffeffff 	.word	0xfffeffff
 8001724:	00001388 	.word	0x00001388
 8001728:	efffffff 	.word	0xefffffff

0800172c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e044      	b.n	80017c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2270      	movs	r2, #112	; 0x70
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f7fe fed3 	bl	80004fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2224      	movs	r2, #36	; 0x24
 800175a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	438a      	bics	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fa7a 	bl	8001c68 <UART_SetConfig>
 8001774:	0003      	movs	r3, r0
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e024      	b.n	80017c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	0018      	movs	r0, r3
 800178a:	f000 fbf3 	bl	8001f74 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	490d      	ldr	r1, [pc, #52]	; (80017d0 <HAL_UART_Init+0xa4>)
 800179a:	400a      	ands	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2108      	movs	r1, #8
 80017aa:	438a      	bics	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fc8b 	bl	80020dc <UART_CheckIdleState>
 80017c6:	0003      	movs	r3, r0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	fffff7ff 	.word	0xfffff7ff

080017d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	1dbb      	adds	r3, r7, #6
 80017e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d158      	bne.n	800189c <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_UART_Transmit_IT+0x24>
 80017f0:	1dbb      	adds	r3, r7, #6
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e050      	b.n	800189e <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	429a      	cmp	r2, r3
 8001806:	d109      	bne.n	800181c <HAL_UART_Transmit_IT+0x48>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2201      	movs	r2, #1
 8001814:	4013      	ands	r3, r2
 8001816:	d001      	beq.n	800181c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e040      	b.n	800189e <HAL_UART_Transmit_IT+0xca>
      }
    }

    __HAL_LOCK(huart);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2270      	movs	r2, #112	; 0x70
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_UART_Transmit_IT+0x56>
 8001826:	2302      	movs	r3, #2
 8001828:	e039      	b.n	800189e <HAL_UART_Transmit_IT+0xca>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2270      	movs	r2, #112	; 0x70
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1dba      	adds	r2, r7, #6
 800183c:	2150      	movs	r1, #80	; 0x50
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1dba      	adds	r2, r7, #6
 8001846:	2152      	movs	r1, #82	; 0x52
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2221      	movs	r2, #33	; 0x21
 800185c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	015b      	lsls	r3, r3, #5
 8001866:	429a      	cmp	r2, r3
 8001868:	d107      	bne.n	800187a <HAL_UART_Transmit_IT+0xa6>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_UART_Transmit_IT+0xd4>)
 8001876:	665a      	str	r2, [r3, #100]	; 0x64
 8001878:	e002      	b.n	8001880 <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_UART_Transmit_IT+0xd8>)
 800187e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2270      	movs	r2, #112	; 0x70
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800189c:	2302      	movs	r3, #2
  }
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b004      	add	sp, #16
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	08002343 	.word	0x08002343
 80018ac:	080022d3 	.word	0x080022d3

080018b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	1dbb      	adds	r3, r7, #6
 80018bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d000      	beq.n	80018c8 <HAL_UART_Receive_IT+0x18>
 80018c6:	e08b      	b.n	80019e0 <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_UART_Receive_IT+0x26>
 80018ce:	1dbb      	adds	r3, r7, #6
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e083      	b.n	80019e2 <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	015b      	lsls	r3, r3, #5
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d109      	bne.n	80018fa <HAL_UART_Receive_IT+0x4a>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d001      	beq.n	80018fa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e073      	b.n	80019e2 <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2270      	movs	r2, #112	; 0x70
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_UART_Receive_IT+0x58>
 8001904:	2302      	movs	r3, #2
 8001906:	e06c      	b.n	80019e2 <HAL_UART_Receive_IT+0x132>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2270      	movs	r2, #112	; 0x70
 800190c:	2101      	movs	r1, #1
 800190e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1dba      	adds	r2, r7, #6
 800191a:	2158      	movs	r1, #88	; 0x58
 800191c:	8812      	ldrh	r2, [r2, #0]
 800191e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1dba      	adds	r2, r7, #6
 8001924:	215a      	movs	r1, #90	; 0x5a
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	429a      	cmp	r2, r3
 800193a:	d10d      	bne.n	8001958 <HAL_UART_Receive_IT+0xa8>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_UART_Receive_IT+0x9e>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	225c      	movs	r2, #92	; 0x5c
 8001948:	4928      	ldr	r1, [pc, #160]	; (80019ec <HAL_UART_Receive_IT+0x13c>)
 800194a:	5299      	strh	r1, [r3, r2]
 800194c:	e01a      	b.n	8001984 <HAL_UART_Receive_IT+0xd4>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	225c      	movs	r2, #92	; 0x5c
 8001952:	21ff      	movs	r1, #255	; 0xff
 8001954:	5299      	strh	r1, [r3, r2]
 8001956:	e015      	b.n	8001984 <HAL_UART_Receive_IT+0xd4>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10d      	bne.n	800197c <HAL_UART_Receive_IT+0xcc>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d104      	bne.n	8001972 <HAL_UART_Receive_IT+0xc2>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	225c      	movs	r2, #92	; 0x5c
 800196c:	21ff      	movs	r1, #255	; 0xff
 800196e:	5299      	strh	r1, [r3, r2]
 8001970:	e008      	b.n	8001984 <HAL_UART_Receive_IT+0xd4>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	225c      	movs	r2, #92	; 0x5c
 8001976:	217f      	movs	r1, #127	; 0x7f
 8001978:	5299      	strh	r1, [r3, r2]
 800197a:	e003      	b.n	8001984 <HAL_UART_Receive_IT+0xd4>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	225c      	movs	r2, #92	; 0x5c
 8001980:	2100      	movs	r1, #0
 8001982:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2222      	movs	r2, #34	; 0x22
 800198e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_UART_Receive_IT+0x10c>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_UART_Receive_IT+0x140>)
 80019b8:	661a      	str	r2, [r3, #96]	; 0x60
 80019ba:	e002      	b.n	80019c2 <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_UART_Receive_IT+0x144>)
 80019c0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2270      	movs	r2, #112	; 0x70
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2190      	movs	r1, #144	; 0x90
 80019d6:	0049      	lsls	r1, r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	000001ff 	.word	0x000001ff
 80019f0:	080024ad 	.word	0x080024ad
 80019f4:	080023f1 	.word	0x080023f1

080019f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	4a89      	ldr	r2, [pc, #548]	; (8001c40 <HAL_UART_IRQHandler+0x248>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d112      	bne.n	8001a4c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2220      	movs	r2, #32
 8001a32:	4013      	ands	r3, r2
 8001a34:	d00a      	beq.n	8001a4c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d100      	bne.n	8001a40 <HAL_UART_IRQHandler+0x48>
 8001a3e:	e0f7      	b.n	8001c30 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	0010      	movs	r0, r2
 8001a48:	4798      	blx	r3
      }
      return;
 8001a4a:	e0f1      	b.n	8001c30 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d100      	bne.n	8001a54 <HAL_UART_IRQHandler+0x5c>
 8001a52:	e0cd      	b.n	8001bf0 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d105      	bne.n	8001a68 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	2390      	movs	r3, #144	; 0x90
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d100      	bne.n	8001a68 <HAL_UART_IRQHandler+0x70>
 8001a66:	e0c3      	b.n	8001bf0 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d00e      	beq.n	8001a8e <HAL_UART_IRQHandler+0x96>
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a86:	2201      	movs	r2, #1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_UART_IRQHandler+0xba>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aaa:	2204      	movs	r2, #4
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_UART_IRQHandler+0xde>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ace:	2202      	movs	r2, #2
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4013      	ands	r3, r2
 8001adc:	d011      	beq.n	8001b02 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d103      	bne.n	8001aee <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001aec:	d009      	beq.n	8001b02 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2208      	movs	r2, #8
 8001af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001afa:	2208      	movs	r2, #8
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d00f      	beq.n	8001b2c <HAL_UART_IRQHandler+0x134>
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	04db      	lsls	r3, r3, #19
 8001b12:	4013      	ands	r3, r2
 8001b14:	d00a      	beq.n	8001b2c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b24:	2220      	movs	r2, #32
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d100      	bne.n	8001b36 <HAL_UART_IRQHandler+0x13e>
 8001b34:	e07e      	b.n	8001c34 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d00c      	beq.n	8001b58 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2220      	movs	r2, #32
 8001b42:	4013      	ands	r3, r2
 8001b44:	d008      	beq.n	8001b58 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	0010      	movs	r0, r2
 8001b56:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d003      	beq.n	8001b74 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2228      	movs	r2, #40	; 0x28
 8001b70:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b72:	d033      	beq.n	8001bdc <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 fb74 	bl	8002264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d123      	bne.n	8001bd2 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	438a      	bics	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba6:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <HAL_UART_IRQHandler+0x24c>)
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f7fe feca 	bl	8000948 <HAL_DMA_Abort_IT>
 8001bb4:	1e03      	subs	r3, r0, #0
 8001bb6:	d019      	beq.n	8001bec <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc6:	e011      	b.n	8001bec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 f844 	bl	8001c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bd0:	e00c      	b.n	8001bec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f83f 	bl	8001c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bda:	e007      	b.n	8001bec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f83a 	bl	8001c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8001bea:	e023      	b.n	8001c34 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bec:	46c0      	nop			; (mov r8, r8)
    return;
 8001bee:	e021      	b.n	8001c34 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d017      	beq.n	8001c38 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	0010      	movs	r0, r2
 8001c10:	4798      	blx	r3
    }
    return;
 8001c12:	e011      	b.n	8001c38 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d00e      	beq.n	8001c3a <HAL_UART_IRQHandler+0x242>
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	4013      	ands	r3, r2
 8001c22:	d00a      	beq.n	8001c3a <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fbc7 	bl	80023ba <UART_EndTransmit_IT>
    return;
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	e004      	b.n	8001c3a <HAL_UART_IRQHandler+0x242>
      return;
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	e002      	b.n	8001c3a <HAL_UART_IRQHandler+0x242>
    return;
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	e000      	b.n	8001c3a <HAL_UART_IRQHandler+0x242>
    return;
 8001c38:	46c0      	nop			; (mov r8, r8)
  }

}
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b008      	add	sp, #32
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0000080f 	.word	0x0000080f
 8001c44:	080022a5 	.word	0x080022a5

08001c48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c74:	2317      	movs	r3, #23
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4aad      	ldr	r2, [pc, #692]	; (8001f50 <UART_SetConfig+0x2e8>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4aa8      	ldr	r2, [pc, #672]	; (8001f54 <UART_SetConfig+0x2ec>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a9f      	ldr	r2, [pc, #636]	; (8001f58 <UART_SetConfig+0x2f0>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a9b      	ldr	r2, [pc, #620]	; (8001f5c <UART_SetConfig+0x2f4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d125      	bne.n	8001d3e <UART_SetConfig+0xd6>
 8001cf2:	4b9b      	ldr	r3, [pc, #620]	; (8001f60 <UART_SetConfig+0x2f8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d00f      	beq.n	8001d1e <UART_SetConfig+0xb6>
 8001cfe:	d304      	bcc.n	8001d0a <UART_SetConfig+0xa2>
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d011      	beq.n	8001d28 <UART_SetConfig+0xc0>
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d005      	beq.n	8001d14 <UART_SetConfig+0xac>
 8001d08:	e013      	b.n	8001d32 <UART_SetConfig+0xca>
 8001d0a:	231f      	movs	r3, #31
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e022      	b.n	8001d5a <UART_SetConfig+0xf2>
 8001d14:	231f      	movs	r3, #31
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e01d      	b.n	8001d5a <UART_SetConfig+0xf2>
 8001d1e:	231f      	movs	r3, #31
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2204      	movs	r2, #4
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e018      	b.n	8001d5a <UART_SetConfig+0xf2>
 8001d28:	231f      	movs	r3, #31
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e013      	b.n	8001d5a <UART_SetConfig+0xf2>
 8001d32:	231f      	movs	r3, #31
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2210      	movs	r2, #16
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	e00d      	b.n	8001d5a <UART_SetConfig+0xf2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a88      	ldr	r2, [pc, #544]	; (8001f64 <UART_SetConfig+0x2fc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d104      	bne.n	8001d52 <UART_SetConfig+0xea>
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e003      	b.n	8001d5a <UART_SetConfig+0xf2>
 8001d52:	231f      	movs	r3, #31
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2210      	movs	r2, #16
 8001d58:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d000      	beq.n	8001d68 <UART_SetConfig+0x100>
 8001d66:	e07d      	b.n	8001e64 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8001d68:	231f      	movs	r3, #31
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d01c      	beq.n	8001dac <UART_SetConfig+0x144>
 8001d72:	dc02      	bgt.n	8001d7a <UART_SetConfig+0x112>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <UART_SetConfig+0x11c>
 8001d78:	e04b      	b.n	8001e12 <UART_SetConfig+0x1aa>
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d025      	beq.n	8001dca <UART_SetConfig+0x162>
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d037      	beq.n	8001df2 <UART_SetConfig+0x18a>
 8001d82:	e046      	b.n	8001e12 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d84:	f7ff fbee 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	005a      	lsls	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	18d2      	adds	r2, r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0010      	movs	r0, r2
 8001da0:	f7fe f9b2 	bl	8000108 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	61bb      	str	r3, [r7, #24]
        break;
 8001daa:	e037      	b.n	8001e1c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <UART_SetConfig+0x300>)
 8001db4:	189a      	adds	r2, r3, r2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0019      	movs	r1, r3
 8001dbc:	0010      	movs	r0, r2
 8001dbe:	f7fe f9a3 	bl	8000108 <__udivsi3>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	61bb      	str	r3, [r7, #24]
        break;
 8001dc8:	e028      	b.n	8001e1c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001dca:	f7ff fb5d 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	005a      	lsls	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	18d2      	adds	r2, r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	0019      	movs	r1, r3
 8001de4:	0010      	movs	r0, r2
 8001de6:	f7fe f98f 	bl	8000108 <__udivsi3>
 8001dea:	0003      	movs	r3, r0
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	61bb      	str	r3, [r7, #24]
        break;
 8001df0:	e014      	b.n	8001e1c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0252      	lsls	r2, r2, #9
 8001dfc:	189a      	adds	r2, r3, r2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0019      	movs	r1, r3
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7fe f97f 	bl	8000108 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
        break;
 8001e10:	e004      	b.n	8001e1c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8001e12:	2317      	movs	r3, #23
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
        break;
 8001e1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	d91b      	bls.n	8001e5a <UART_SetConfig+0x1f2>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <UART_SetConfig+0x304>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d817      	bhi.n	8001e5a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	200a      	movs	r0, #10
 8001e30:	183b      	adds	r3, r7, r0
 8001e32:	210f      	movs	r1, #15
 8001e34:	438a      	bics	r2, r1
 8001e36:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	b299      	uxth	r1, r3
 8001e44:	183b      	adds	r3, r7, r0
 8001e46:	183a      	adds	r2, r7, r0
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	183a      	adds	r2, r7, r0
 8001e54:	8812      	ldrh	r2, [r2, #0]
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	e06c      	b.n	8001f34 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001e5a:	2317      	movs	r3, #23
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e067      	b.n	8001f34 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8001e64:	231f      	movs	r3, #31
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d01b      	beq.n	8001ea6 <UART_SetConfig+0x23e>
 8001e6e:	dc02      	bgt.n	8001e76 <UART_SetConfig+0x20e>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <UART_SetConfig+0x218>
 8001e74:	e049      	b.n	8001f0a <UART_SetConfig+0x2a2>
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d024      	beq.n	8001ec4 <UART_SetConfig+0x25c>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d035      	beq.n	8001eea <UART_SetConfig+0x282>
 8001e7e:	e044      	b.n	8001f0a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e80:	f7ff fb70 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 8001e84:	0003      	movs	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	085a      	lsrs	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	18d2      	adds	r2, r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0019      	movs	r1, r3
 8001e98:	0010      	movs	r0, r2
 8001e9a:	f7fe f935 	bl	8000108 <__udivsi3>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	61bb      	str	r3, [r7, #24]
        break;
 8001ea4:	e036      	b.n	8001f14 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <UART_SetConfig+0x308>)
 8001eae:	189a      	adds	r2, r3, r2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	0010      	movs	r0, r2
 8001eb8:	f7fe f926 	bl	8000108 <__udivsi3>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	61bb      	str	r3, [r7, #24]
        break;
 8001ec2:	e027      	b.n	8001f14 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ec4:	f7ff fae0 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	085a      	lsrs	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	18d2      	adds	r2, r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0019      	movs	r1, r3
 8001edc:	0010      	movs	r0, r2
 8001ede:	f7fe f913 	bl	8000108 <__udivsi3>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	61bb      	str	r3, [r7, #24]
        break;
 8001ee8:	e014      	b.n	8001f14 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	0212      	lsls	r2, r2, #8
 8001ef4:	189a      	adds	r2, r3, r2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0019      	movs	r1, r3
 8001efc:	0010      	movs	r0, r2
 8001efe:	f7fe f903 	bl	8000108 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	61bb      	str	r3, [r7, #24]
        break;
 8001f08:	e004      	b.n	8001f14 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
        break;
 8001f12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d908      	bls.n	8001f2c <UART_SetConfig+0x2c4>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <UART_SetConfig+0x304>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d804      	bhi.n	8001f2c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e003      	b.n	8001f34 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001f2c:	2317      	movs	r3, #23
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001f40:	2317      	movs	r3, #23
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	781b      	ldrb	r3, [r3, #0]
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b008      	add	sp, #32
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	ffff69f3 	.word	0xffff69f3
 8001f54:	ffffcfff 	.word	0xffffcfff
 8001f58:	fffff4ff 	.word	0xfffff4ff
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40004400 	.word	0x40004400
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	0000ffff 	.word	0x0000ffff
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d00b      	beq.n	8001f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <UART_AdvFeatureConfig+0x144>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d00b      	beq.n	8001fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a43      	ldr	r2, [pc, #268]	; (80020bc <UART_AdvFeatureConfig+0x148>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <UART_AdvFeatureConfig+0x14c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00b      	beq.n	8002004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <UART_AdvFeatureConfig+0x150>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2210      	movs	r2, #16
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <UART_AdvFeatureConfig+0x154>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2220      	movs	r2, #32
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <UART_AdvFeatureConfig+0x158>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	4013      	ands	r3, r2
 8002050:	d01d      	beq.n	800208e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <UART_AdvFeatureConfig+0x15c>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	035b      	lsls	r3, r3, #13
 8002072:	429a      	cmp	r2, r3
 8002074:	d10b      	bne.n	800208e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <UART_AdvFeatureConfig+0x160>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4013      	ands	r3, r2
 8002096:	d00b      	beq.n	80020b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <UART_AdvFeatureConfig+0x164>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
  }
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	fffdffff 	.word	0xfffdffff
 80020bc:	fffeffff 	.word	0xfffeffff
 80020c0:	fffbffff 	.word	0xfffbffff
 80020c4:	ffff7fff 	.word	0xffff7fff
 80020c8:	ffffefff 	.word	0xffffefff
 80020cc:	ffffdfff 	.word	0xffffdfff
 80020d0:	ffefffff 	.word	0xffefffff
 80020d4:	ff9fffff 	.word	0xff9fffff
 80020d8:	fff7ffff 	.word	0xfff7ffff

080020dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80020ea:	f7fe fb23 	bl	8000734 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d10d      	bne.n	800211c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	0399      	lsls	r1, r3, #14
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <UART_CheckIdleState+0x88>)
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	0013      	movs	r3, r2
 800210e:	2200      	movs	r2, #0
 8002110:	f000 f82a 	bl	8002168 <UART_WaitOnFlagUntilTimeout>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d001      	beq.n	800211c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e01f      	b.n	800215c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	2b04      	cmp	r3, #4
 8002128:	d10d      	bne.n	8002146 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	03d9      	lsls	r1, r3, #15
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <UART_CheckIdleState+0x88>)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	0013      	movs	r3, r2
 8002138:	2200      	movs	r2, #0
 800213a:	f000 f815 	bl	8002168 <UART_WaitOnFlagUntilTimeout>
 800213e:	1e03      	subs	r3, r0, #0
 8002140:	d001      	beq.n	8002146 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00a      	b.n	800215c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2270      	movs	r2, #112	; 0x70
 8002156:	2100      	movs	r1, #0
 8002158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bd80      	pop	{r7, pc}
 8002164:	01ffffff 	.word	0x01ffffff

08002168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002178:	e05d      	b.n	8002236 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	3301      	adds	r3, #1
 800217e:	d05a      	beq.n	8002236 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7fe fad8 	bl	8000734 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11b      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	492f      	ldr	r1, [pc, #188]	; (8002260 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	438a      	bics	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2270      	movs	r2, #112	; 0x70
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e043      	b.n	8002256 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2204      	movs	r2, #4
 80021d6:	4013      	ands	r3, r2
 80021d8:	d02d      	beq.n	8002236 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	401a      	ands	r2, r3
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d123      	bne.n	8002236 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4917      	ldr	r1, [pc, #92]	; (8002260 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002204:	400a      	ands	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2270      	movs	r2, #112	; 0x70
 800222e:	2100      	movs	r1, #0
 8002230:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e00f      	b.n	8002256 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	425a      	negs	r2, r3
 8002246:	4153      	adcs	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	001a      	movs	r2, r3
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d092      	beq.n	800217a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	fffffe5f 	.word	0xfffffe5f

08002264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	490a      	ldr	r1, [pc, #40]	; (80022a0 <UART_EndRxTransfer+0x3c>)
 8002278:	400a      	ands	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	fffffedf 	.word	0xfffffedf

080022a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	225a      	movs	r2, #90	; 0x5a
 80022b6:	2100      	movs	r1, #0
 80022b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2252      	movs	r2, #82	; 0x52
 80022be:	2100      	movs	r1, #0
 80022c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff fcc7 	bl	8001c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	2b21      	cmp	r3, #33	; 0x21
 80022e0:	d12b      	bne.n	800233a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2252      	movs	r2, #82	; 0x52
 80022e6:	5a9b      	ldrh	r3, [r3, r2]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d110      	bne.n	8002310 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	438a      	bics	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2140      	movs	r1, #64	; 0x40
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800230e:	e014      	b.n	800233a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b292      	uxth	r2, r2
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2252      	movs	r2, #82	; 0x52
 800232c:	5a9b      	ldrh	r3, [r3, r2]
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b299      	uxth	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2252      	movs	r2, #82	; 0x52
 8002338:	5299      	strh	r1, [r3, r2]
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}

08002342 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234e:	2b21      	cmp	r3, #33	; 0x21
 8002350:	d12f      	bne.n	80023b2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2252      	movs	r2, #82	; 0x52
 8002356:	5a9b      	ldrh	r3, [r3, r2]
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d110      	bne.n	8002380 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	438a      	bics	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2140      	movs	r1, #64	; 0x40
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800237e:	e018      	b.n	80023b2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	05d2      	lsls	r2, r2, #23
 8002390:	0dd2      	lsrs	r2, r2, #23
 8002392:	b292      	uxth	r2, r2
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	1c9a      	adds	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2252      	movs	r2, #82	; 0x52
 80023a4:	5a9b      	ldrh	r3, [r3, r2]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b299      	uxth	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2252      	movs	r2, #82	; 0x52
 80023b0:	5299      	strh	r1, [r3, r2]
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}

080023ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	438a      	bics	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fd ffc2 	bl	800036a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80023f8:	230e      	movs	r3, #14
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	215c      	movs	r1, #92	; 0x5c
 8002400:	5a52      	ldrh	r2, [r2, r1]
 8002402:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002408:	2b22      	cmp	r3, #34	; 0x22
 800240a:	d140      	bne.n	800248e <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	210c      	movs	r1, #12
 8002412:	187b      	adds	r3, r7, r1
 8002414:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002416:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002418:	187b      	adds	r3, r7, r1
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	230e      	movs	r3, #14
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b2d9      	uxtb	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	400a      	ands	r2, r1
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	225a      	movs	r2, #90	; 0x5a
 800243e:	5a9b      	ldrh	r3, [r3, r2]
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b299      	uxth	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	225a      	movs	r2, #90	; 0x5a
 800244a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	225a      	movs	r2, #90	; 0x5a
 8002450:	5a9b      	ldrh	r3, [r3, r2]
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d122      	bne.n	800249e <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4911      	ldr	r1, [pc, #68]	; (80024a8 <UART_RxISR_8BIT+0xb8>)
 8002464:	400a      	ands	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff fbde 	bl	8001c48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800248c:	e007      	b.n	800249e <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2108      	movs	r1, #8
 800249a:	430a      	orrs	r2, r1
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b004      	add	sp, #16
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	fffffedf 	.word	0xfffffedf

080024ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80024b4:	230e      	movs	r3, #14
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	215c      	movs	r1, #92	; 0x5c
 80024bc:	5a52      	ldrh	r2, [r2, r1]
 80024be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c4:	2b22      	cmp	r3, #34	; 0x22
 80024c6:	d140      	bne.n	800254a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	210c      	movs	r1, #12
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80024d2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	220e      	movs	r2, #14
 80024de:	18ba      	adds	r2, r7, r2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	8812      	ldrh	r2, [r2, #0]
 80024e4:	4013      	ands	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	225a      	movs	r2, #90	; 0x5a
 80024fa:	5a9b      	ldrh	r3, [r3, r2]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b299      	uxth	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	225a      	movs	r2, #90	; 0x5a
 8002506:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	225a      	movs	r2, #90	; 0x5a
 800250c:	5a9b      	ldrh	r3, [r3, r2]
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d122      	bne.n	800255a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4911      	ldr	r1, [pc, #68]	; (8002564 <UART_RxISR_16BIT+0xb8>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	438a      	bics	r2, r1
 8002532:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff fb80 	bl	8001c48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002548:	e007      	b.n	800255a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2108      	movs	r1, #8
 8002556:	430a      	orrs	r2, r1
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	fffffedf 	.word	0xfffffedf

08002568 <__libc_init_array>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	2600      	movs	r6, #0
 800256c:	4d0c      	ldr	r5, [pc, #48]	; (80025a0 <__libc_init_array+0x38>)
 800256e:	4c0d      	ldr	r4, [pc, #52]	; (80025a4 <__libc_init_array+0x3c>)
 8002570:	1b64      	subs	r4, r4, r5
 8002572:	10a4      	asrs	r4, r4, #2
 8002574:	42a6      	cmp	r6, r4
 8002576:	d109      	bne.n	800258c <__libc_init_array+0x24>
 8002578:	2600      	movs	r6, #0
 800257a:	f000 f821 	bl	80025c0 <_init>
 800257e:	4d0a      	ldr	r5, [pc, #40]	; (80025a8 <__libc_init_array+0x40>)
 8002580:	4c0a      	ldr	r4, [pc, #40]	; (80025ac <__libc_init_array+0x44>)
 8002582:	1b64      	subs	r4, r4, r5
 8002584:	10a4      	asrs	r4, r4, #2
 8002586:	42a6      	cmp	r6, r4
 8002588:	d105      	bne.n	8002596 <__libc_init_array+0x2e>
 800258a:	bd70      	pop	{r4, r5, r6, pc}
 800258c:	00b3      	lsls	r3, r6, #2
 800258e:	58eb      	ldr	r3, [r5, r3]
 8002590:	4798      	blx	r3
 8002592:	3601      	adds	r6, #1
 8002594:	e7ee      	b.n	8002574 <__libc_init_array+0xc>
 8002596:	00b3      	lsls	r3, r6, #2
 8002598:	58eb      	ldr	r3, [r5, r3]
 800259a:	4798      	blx	r3
 800259c:	3601      	adds	r6, #1
 800259e:	e7f2      	b.n	8002586 <__libc_init_array+0x1e>
 80025a0:	08002610 	.word	0x08002610
 80025a4:	08002610 	.word	0x08002610
 80025a8:	08002610 	.word	0x08002610
 80025ac:	08002614 	.word	0x08002614

080025b0 <memset>:
 80025b0:	0003      	movs	r3, r0
 80025b2:	1812      	adds	r2, r2, r0
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d100      	bne.n	80025ba <memset+0xa>
 80025b8:	4770      	bx	lr
 80025ba:	7019      	strb	r1, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	e7f9      	b.n	80025b4 <memset+0x4>

080025c0 <_init>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr

080025cc <_fini>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr
